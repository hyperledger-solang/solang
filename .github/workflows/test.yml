name: Build tests
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  repolinter:
    name: Repolinter
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Run repolinter
        run: npx repolinter --rulesetUrl https://raw.githubusercontent.com/hyperledger-labs/hyperledger-community-management-tools/master/repo_structure/repolint.json

  lints:
    name: Lints
    runs-on: ubuntu-20.04
    container: ghcr.io/hyperledger/solang:ci
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Rust stable
        run: rustup default stable
      - name: Run cargo fmt
        run: cargo fmt --all -- --check
      - name: Run cargo clippy
        run: cargo clippy --workspace --tests --bins -- -D warnings -D clippy::inconsistent-struct-constructor

  docs:
    name: Docs
    runs-on: ubuntu-latest
    container: ubuntu:20.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install Python
        run: |
          apt-get update
          apt-get install -y python3-pip
      - name: Install Docs requiremets
        run : |
          pip install -r requirements.txt
      - name: Build docs
        run: make html
        working-directory: docs

  linux-x86-64:
    name: Linux x86-64
    runs-on: ubuntu-20.04
    container: ghcr.io/hyperledger/solang:ci
    steps:
    - name: Checkout sources
      # Make sure "git describe --tags" works for solang --version
      # checkout@v2 requires git 2.18 or higher, which is not in our image
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Rust stable
      run: rustup default 1.59.0
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose --workspace
    - uses: actions/upload-artifact@master
      with:
        name: solang-linux-x86-64
        path: ./target/debug/solang

  linux-arm:
    name: Linux Arm
    runs-on: linux-arm64
    if: ${{ github.repository_owner == 'hyperledger' }}
    container: ghcr.io/hyperledger/solang:ci
    steps:
    - name: Checkout sources
      # Make sure "git describe --tags" works for solang --version
      # checkout@v2 requires git 2.18 or higher, which is not in our image
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Rust stable
      run: rustup default 1.59.0
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose --workspace
    - uses: actions/upload-artifact@master
      with:
        name: solang-linux-arm64
        path: ./target/debug/solang

  windows:
    name: Windows
    runs-on: windows-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
      with:
        # Make sure "git describe --tags" works for solang --version
        fetch-depth: 0
        submodules: recursive
    - name: Download LLVM
      run: curl -sSL -o c:\llvm.zip https://github.com/hyperledger/solang/releases/download/v0.1.13/llvm13.0-win.zip
    - name: Extract LLVM
      run: unzip c:\llvm.zip -d c:/
    - name: Add LLVM to Path
      run: echo "c:\llvm13.0\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
    - name: Stable with rustfmt and clippy
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        components: clippy
    # We run clippy on Linux in the lint job above, but this does not check #[cfg(windows)] items
    - name: Run cargo clippy
      run: cargo clippy --workspace --tests --bins -- -D warnings -D clippy::inconsistent-struct-constructor
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose --workspace
    - uses: actions/upload-artifact@master
      with:
        name: solang.exe
        path: ./target/debug/solang.exe

  mac-arm:
    name: Mac Arm
    runs-on: [self-hosted, macOS, ARM64, MacStadium]
    if: ${{ github.repository_owner == 'hyperledger' }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        # Make sure "git describe --tags" works for solang --version
        fetch-depth: 0
        submodules: recursive
    - name: Get LLVM
      run: curl -L --output llvm13.0-mac-arm.tar.xz https://github.com/hyperledger/solang/releases/download/v0.1.13/llvm13.0-mac-arm.tar.xz
    - name: Extract LLVM
      run: tar Jxf llvm13.0-mac-arm.tar.xz
    - name: Add LLVM to Path
      run: echo "$(pwd)/llvm13.0/bin" >> $GITHUB_PATH
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose --workspace
    - uses: actions/upload-artifact@master
      with:
        name: solang-mac-arm
        path: ./target/debug/solang

  mac-intel:
    name: Mac Intel
    runs-on: macos-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
      with:
        # Make sure "git describe --tags" works for solang --version
        fetch-depth: 0
        submodules: recursive
    - name: Get LLVM
      run: wget -q -O llvm13.0-mac-intel.tar.xz https://github.com/hyperledger/solang/releases/download/v0.1.13/llvm13.0-mac-intel.tar.xz
    - name: Extract LLVM
      run: tar Jxf llvm13.0-mac-intel.tar.xz
    - name: Add LLVM to Path
      run: echo "$(pwd)/llvm13.0/bin" >> $GITHUB_PATH
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose --workspace
    - uses: actions/upload-artifact@master
      with:
        name: solang-mac-intel
        path: ./target/debug/solang

  mac-universal:
    name: Mac Universal Binary
    runs-on: macos-latest
    needs: [mac-arm, mac-intel]
    steps:
    - uses: actions/download-artifact@master
      with:
        name: solang-mac-intel
    - run: mv solang solang-mac-intel
    - uses: actions/download-artifact@master
      with:
        name: solang-mac-arm
    - run: mv solang solang-mac-arm
    - run: lipo -create -output solang-mac solang-mac-intel solang-mac-arm
    - uses: actions/upload-artifact@master
      with:
        name: solang-mac
        path: solang-mac

  container-multiarch:
    name: Multiarch Container Image
    runs-on: linux-arm64
    if: ${{ github.repository_owner == 'hyperledger' }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        # Make sure "git describe --tags" works for solang --version
        fetch-depth: 0
    - run: echo "::set-output name=push::--push"
      id: push
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    - run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        docker buildx build . \
          ${{steps.push.outputs.push}} \
          -t ghcr.io/${GITHUB_REPOSITORY}:latest \
          --platform linux/arm64,linux/amd64 \
          --label org.opencontainers.image.description="Solidity Compiler for Solana and Substrate version $(git describe --tags)"

  solana:
    name: Solana Integration test
    runs-on: ubuntu-latest
    container: ghcr.io/hyperledger/solang:ci
    needs: linux-x86-64
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
    - uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Rust Stable
      run: rustup default stable
    - name: Setup yarn
      run: npm install -g yarn
    - uses: actions/download-artifact@master
      with:
        name: solang-linux-x86-64
        path: bin
    - name: Solang Compiler
      run: |
        chmod 755 ./bin/solang
        echo "$(pwd)/bin" >> $GITHUB_PATH
    - name: Build Anchor test program
      run: |
        yarn install
        anchor build
        anchor test
      working-directory: ./integration/anchor
    - run: nohup solana-test-validator -q &
    - run: npm install
      working-directory: ./integration/solana
    - name: Deploy Anchor program
      run: |
        solana -ul airdrop -k id.json 10
        anchor deploy
      working-directory: ./integration/anchor
    - name: Create Solidity interface file for Anchor
      run: solang idl ../anchor/target/idl/anchor.json
      working-directory: ./integration/solana
    - name: Build Solang contracts
      run: npm run build
      working-directory: ./integration/solana
    - name: Deploy and test contracts
      run: npm run test
      working-directory: ./integration/solana

  substrate:
    name: Substrate Integration test
    runs-on: ubuntu-20.04
    needs: linux-x86-64
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
      # We can't run substrate as a github actions service, since it requires
      # command line arguments. See https://github.com/actions/runner/pull/1152
    - name: Start substrate
      run: docker run -d -p 9944:9944 paritytech/contracts-ci-linux:production substrate-contracts-node --dev --ws-external
    - uses: actions/setup-node@v1
      with:
        node-version: '14'
    - uses: actions/download-artifact@master
      with:
        name: solang-linux-x86-64
        path: bin
    - run: |
        chmod 755 ./bin/solang
        echo "$(pwd)/bin" >> $GITHUB_PATH
    - run: npm install
      working-directory: ./integration/substrate
    - name: Build Solang contracts
      run: npm run build
      working-directory: ./integration/substrate
    - name: Deploy and test contracts
      run: npm run test
      working-directory: ./integration/substrate

  vscode:
    name: Visual Code Extension
    runs-on: ubuntu-20.04
    needs: linux-x86-64
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: actions/download-artifact@master
      with:
        name: solang-linux-x86-64
        path: bin
    - run: |
        chmod 755 ./bin/solang
        echo "$(pwd)/bin" >> $GITHUB_PATH
    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14'
    - run: npm install
      working-directory: ./vscode
    - run: npm run compile
      working-directory: ./vscode
    - name: Run headless test
      uses: GabrielBB/xvfb-action@v1
      with:
        working-directory: ./vscode
        run: npm test
    - run: npm install -g vsce
      working-directory: ./vscode
    - run: vsce package
      working-directory: ./vscode
