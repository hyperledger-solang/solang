strict digraph "tests/contract_testcases/solana/for_if_no_else.sol" {
	foo [label="function foo\ntests/contract_testcases/solana/for_if_no_else.sol:1:1-29\nsignature foo()\nvisibility internal\nmutability nonpayable"]
	returns [label="returns\nint256 "]
	for [label="for\ntests/contract_testcases/solana/for_if_no_else.sol:2:2-4:13"]
	var_decl [label="variable decl int256 i\ntests/contract_testcases/solana/for_if_no_else.sol:2:7-14"]
	number_literal [label="int256 literal: 0\ntests/contract_testcases/solana/for_if_no_else.sol:2:13-14"]
	less [label="less\ntests/contract_testcases/solana/for_if_no_else.sol:2:16-21"]
	variable [label="variable: i\nint256\ntests/contract_testcases/solana/for_if_no_else.sol:2:16-17"]
	number_literal_8 [label="int256 literal: 10\ntests/contract_testcases/solana/for_if_no_else.sol:2:19-21"]
	expr [label="expression\ntests/contract_testcases/solana/for_if_no_else.sol:2:23-26"]
	post_increment [label="post increment\nint256\ntests/contract_testcases/solana/for_if_no_else.sol:2:23-26"]
	variable_11 [label="variable: i\nint256\ntests/contract_testcases/solana/for_if_no_else.sol:2:23-24"]
	if [label="if\ntests/contract_testcases/solana/for_if_no_else.sol:3:3-4:13"]
	more [label="more\ntests/contract_testcases/solana/for_if_no_else.sol:3:7-12"]
	variable_14 [label="variable: i\nint256\ntests/contract_testcases/solana/for_if_no_else.sol:3:7-8"]
	number_literal_15 [label="int256 literal: 0\ntests/contract_testcases/solana/for_if_no_else.sol:3:11-12"]
	return [label="return\ntests/contract_testcases/solana/for_if_no_else.sol:4:4-12"]
	number_literal_17 [label="int256 literal: 1\ntests/contract_testcases/solana/for_if_no_else.sol:4:11-12"]
	return_18 [label="return\ntests/contract_testcases/solana/for_if_no_else.sol:6:2-10"]
	number_literal_19 [label="int256 literal: 2\ntests/contract_testcases/solana/for_if_no_else.sol:6:9-10"]
	diagnostic [label="function can be declared 'pure'\nlevel Warning\ntests/contract_testcases/solana/for_if_no_else.sol:1:1-29"]
	free_functions -> foo [label="function"]
	foo -> returns [label="returns"]
	foo -> for [label="body"]
	for -> var_decl [label="init"]
	var_decl -> number_literal [label="init"]
	for -> less [label="cond"]
	less -> variable [label="left"]
	less -> number_literal_8 [label="right"]
	for -> expr [label="next"]
	expr -> post_increment [label="expr"]
	post_increment -> variable_11 [label="expr"]
	for -> if [label="body"]
	if -> more [label="cond"]
	more -> variable_14 [label="left"]
	more -> number_literal_15 [label="right"]
	if -> return [label="then"]
	return -> number_literal_17 [label="expr"]
	for -> return_18 [label="next"]
	return_18 -> number_literal_19 [label="expr"]
	diagnostics -> diagnostic [label="Warning"]
}
