strict digraph "tests/contract_testcases/substrate/expressions/test_cast_errors_02.sol" {
	contract [label="contract test\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:1:1-15"]
	foobar [label="function foobar\ncontract: test\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:2:13-73\nsignature foobar(int32,uint16)\nvisibility public\nmutability nonpayable"]
	parameters [label="parameters\nint32 foo\nuint16 bar"]
	returns [label="returns\nbool "]
	expr [label="expression\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:3:17-26"]
	assign [label="assign\nint32\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:3:17-26"]
	variable [label="variable: foo\nint32\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:3:17-20"]
	zero_ext [label="zero extend int32\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:3:23-26"]
	variable_9 [label="variable: bar\nuint16\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:3:23-26"]
	return [label="return\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:4:17-29"]
	bool_literal [label="bool literal: false\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:4:24-29"]
	diagnostic [label="found contract 'test'\nlevel Debug\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:1:1-15"]
	diagnostic_14 [label="function can be declared 'pure'\nlevel Warning\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:2:13-73"]
	diagnostic_15 [label="function parameter 'foo' has never been read\nlevel Warning\ntests/contract_testcases/substrate/expressions/test_cast_errors_02.sol:2:35-38"]
	contracts -> contract
	contract -> foobar [label="function"]
	foobar -> parameters [label="parameters"]
	foobar -> returns [label="returns"]
	foobar -> expr [label="body"]
	expr -> assign [label="expr"]
	assign -> variable [label="left"]
	assign -> zero_ext [label="right"]
	zero_ext -> variable_9 [label="expr"]
	expr -> return [label="next"]
	return -> bool_literal [label="expr"]
	diagnostics -> diagnostic [label="Debug"]
	diagnostics -> diagnostic_14 [label="Warning"]
	diagnostics -> diagnostic_15 [label="Warning"]
}
