strict digraph "tests/contract_testcases/substrate/structs/parse_structs_16.sol" {
	Tree [label="name:Tree\ncontract: AddressTree\ntests/contract_testcases/substrate/structs/parse_structs_16.sol:2:12-16\nfield name:Items ty:mapping(uint256 => struct AddressTree.Wrapped)"]
	Wrapped [label="name:Wrapped\ncontract: AddressTree\ntests/contract_testcases/substrate/structs/parse_structs_16.sol:5:9-16\nfield name:Arr ty:struct AddressTree.Tree[]"]
	contract [label="contract AddressTree\ntests/contract_testcases/substrate/structs/parse_structs_16.sol:1:1-8:2"]
	diagnostic [label="found contract 'AddressTree'\nlevel Debug\ntests/contract_testcases/substrate/structs/parse_structs_16.sol:1:1-8:2"]
	diagnostic_7 [label="struct 'Tree' has infinite size\nlevel Error\ntests/contract_testcases/substrate/structs/parse_structs_16.sol:2:12-16"]
	note [label="recursive field 'Items'\ntests/contract_testcases/substrate/structs/parse_structs_16.sol:3:9-42"]
	diagnostic_9 [label="struct 'Wrapped' has infinite size\nlevel Error\ntests/contract_testcases/substrate/structs/parse_structs_16.sol:5:9-16"]
	note_10 [label="recursive field 'Arr'\ntests/contract_testcases/substrate/structs/parse_structs_16.sol:6:3-13"]
	structs -> Tree
	structs -> Wrapped
	contracts -> contract
	diagnostics -> diagnostic [label="Debug"]
	diagnostics -> diagnostic_7 [label="Error"]
	diagnostic_7 -> note [label="note"]
	diagnostics -> diagnostic_9 [label="Error"]
	diagnostic_9 -> note_10 [label="note"]
}
